// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: katalog-sync.proto

/*
	Package katalogsync is a generated protocol buffer package.

	It is generated from these files:
		katalog-sync.proto

	It has these top-level messages:
		RegisterQuery
		RegisterResult
		DeregisterQuery
		DeregisterResult
*/
package katalogsync

import (
	fmt "fmt"

	proto "github.com/gogo/protobuf/proto"

	math "math"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RegisterQuery struct {
	Namespace     string `protobuf:"bytes,1,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	PodName       string `protobuf:"bytes,2,opt,name=PodName,proto3" json:"PodName,omitempty"`
	ContainerName string `protobuf:"bytes,3,opt,name=ContainerName,proto3" json:"ContainerName,omitempty"`
}

func (m *RegisterQuery) Reset()                    { *m = RegisterQuery{} }
func (m *RegisterQuery) String() string            { return proto.CompactTextString(m) }
func (*RegisterQuery) ProtoMessage()               {}
func (*RegisterQuery) Descriptor() ([]byte, []int) { return fileDescriptorKatalogSync, []int{0} }

func (m *RegisterQuery) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *RegisterQuery) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *RegisterQuery) GetContainerName() string {
	if m != nil {
		return m.ContainerName
	}
	return ""
}

type RegisterResult struct {
}

func (m *RegisterResult) Reset()                    { *m = RegisterResult{} }
func (m *RegisterResult) String() string            { return proto.CompactTextString(m) }
func (*RegisterResult) ProtoMessage()               {}
func (*RegisterResult) Descriptor() ([]byte, []int) { return fileDescriptorKatalogSync, []int{1} }

type DeregisterQuery struct {
	Namespace     string `protobuf:"bytes,1,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	PodName       string `protobuf:"bytes,2,opt,name=PodName,proto3" json:"PodName,omitempty"`
	ContainerName string `protobuf:"bytes,3,opt,name=ContainerName,proto3" json:"ContainerName,omitempty"`
}

func (m *DeregisterQuery) Reset()                    { *m = DeregisterQuery{} }
func (m *DeregisterQuery) String() string            { return proto.CompactTextString(m) }
func (*DeregisterQuery) ProtoMessage()               {}
func (*DeregisterQuery) Descriptor() ([]byte, []int) { return fileDescriptorKatalogSync, []int{2} }

func (m *DeregisterQuery) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeregisterQuery) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *DeregisterQuery) GetContainerName() string {
	if m != nil {
		return m.ContainerName
	}
	return ""
}

type DeregisterResult struct {
}

func (m *DeregisterResult) Reset()                    { *m = DeregisterResult{} }
func (m *DeregisterResult) String() string            { return proto.CompactTextString(m) }
func (*DeregisterResult) ProtoMessage()               {}
func (*DeregisterResult) Descriptor() ([]byte, []int) { return fileDescriptorKatalogSync, []int{3} }

func init() {
	proto.RegisterType((*RegisterQuery)(nil), "katalogsync.RegisterQuery")
	proto.RegisterType((*RegisterResult)(nil), "katalogsync.RegisterResult")
	proto.RegisterType((*DeregisterQuery)(nil), "katalogsync.DeregisterQuery")
	proto.RegisterType((*DeregisterResult)(nil), "katalogsync.DeregisterResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KatalogSync service

type KatalogSyncClient interface {
	Register(ctx context.Context, in *RegisterQuery, opts ...grpc.CallOption) (*RegisterResult, error)
	Deregister(ctx context.Context, in *DeregisterQuery, opts ...grpc.CallOption) (*DeregisterResult, error)
}

type katalogSyncClient struct {
	cc *grpc.ClientConn
}

func NewKatalogSyncClient(cc *grpc.ClientConn) KatalogSyncClient {
	return &katalogSyncClient{cc}
}

func (c *katalogSyncClient) Register(ctx context.Context, in *RegisterQuery, opts ...grpc.CallOption) (*RegisterResult, error) {
	out := new(RegisterResult)
	err := grpc.Invoke(ctx, "/katalogsync.KatalogSync/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *katalogSyncClient) Deregister(ctx context.Context, in *DeregisterQuery, opts ...grpc.CallOption) (*DeregisterResult, error) {
	out := new(DeregisterResult)
	err := grpc.Invoke(ctx, "/katalogsync.KatalogSync/Deregister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KatalogSync service

type KatalogSyncServer interface {
	Register(context.Context, *RegisterQuery) (*RegisterResult, error)
	Deregister(context.Context, *DeregisterQuery) (*DeregisterResult, error)
}

func RegisterKatalogSyncServer(s *grpc.Server, srv KatalogSyncServer) {
	s.RegisterService(&_KatalogSync_serviceDesc, srv)
}

func _KatalogSync_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatalogSyncServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/katalogsync.KatalogSync/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatalogSyncServer).Register(ctx, req.(*RegisterQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _KatalogSync_Deregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeregisterQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KatalogSyncServer).Deregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/katalogsync.KatalogSync/Deregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KatalogSyncServer).Deregister(ctx, req.(*DeregisterQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _KatalogSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "katalogsync.KatalogSync",
	HandlerType: (*KatalogSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _KatalogSync_Register_Handler,
		},
		{
			MethodName: "Deregister",
			Handler:    _KatalogSync_Deregister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "katalog-sync.proto",
}

func (m *RegisterQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterQuery) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKatalogSync(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.PodName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintKatalogSync(dAtA, i, uint64(len(m.PodName)))
		i += copy(dAtA[i:], m.PodName)
	}
	if len(m.ContainerName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintKatalogSync(dAtA, i, uint64(len(m.ContainerName)))
		i += copy(dAtA[i:], m.ContainerName)
	}
	return i, nil
}

func (m *RegisterResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DeregisterQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeregisterQuery) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKatalogSync(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.PodName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintKatalogSync(dAtA, i, uint64(len(m.PodName)))
		i += copy(dAtA[i:], m.PodName)
	}
	if len(m.ContainerName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintKatalogSync(dAtA, i, uint64(len(m.ContainerName)))
		i += copy(dAtA[i:], m.ContainerName)
	}
	return i, nil
}

func (m *DeregisterResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeregisterResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64KatalogSync(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32KatalogSync(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintKatalogSync(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RegisterQuery) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovKatalogSync(uint64(l))
	}
	l = len(m.PodName)
	if l > 0 {
		n += 1 + l + sovKatalogSync(uint64(l))
	}
	l = len(m.ContainerName)
	if l > 0 {
		n += 1 + l + sovKatalogSync(uint64(l))
	}
	return n
}

func (m *RegisterResult) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DeregisterQuery) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovKatalogSync(uint64(l))
	}
	l = len(m.PodName)
	if l > 0 {
		n += 1 + l + sovKatalogSync(uint64(l))
	}
	l = len(m.ContainerName)
	if l > 0 {
		n += 1 + l + sovKatalogSync(uint64(l))
	}
	return n
}

func (m *DeregisterResult) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovKatalogSync(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozKatalogSync(x uint64) (n int) {
	return sovKatalogSync(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKatalogSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKatalogSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKatalogSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKatalogSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKatalogSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKatalogSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKatalogSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKatalogSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKatalogSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKatalogSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipKatalogSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKatalogSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeregisterQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKatalogSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeregisterQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeregisterQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKatalogSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKatalogSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKatalogSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKatalogSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKatalogSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKatalogSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKatalogSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKatalogSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeregisterResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKatalogSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeregisterResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeregisterResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipKatalogSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKatalogSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKatalogSync(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKatalogSync
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKatalogSync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKatalogSync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthKatalogSync
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowKatalogSync
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipKatalogSync(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthKatalogSync = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKatalogSync   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("katalog-sync.proto", fileDescriptorKatalogSync) }

var fileDescriptorKatalogSync = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xca, 0x4e, 0x2c, 0x49,
	0xcc, 0xc9, 0x4f, 0xd7, 0x2d, 0xae, 0xcc, 0x4b, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x86, 0x8a, 0x81, 0x84, 0x94, 0x72, 0xb9, 0x78, 0x83, 0x52, 0xd3, 0x33, 0x8b, 0x4b, 0x52, 0x8b,
	0x02, 0x4b, 0x53, 0x8b, 0x2a, 0x85, 0x64, 0xb8, 0x38, 0xfd, 0x12, 0x73, 0x53, 0x8b, 0x0b, 0x12,
	0x93, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x10, 0x02, 0x42, 0x12, 0x5c, 0xec, 0x01,
	0xf9, 0x29, 0x20, 0xbe, 0x04, 0x13, 0x58, 0x0e, 0xc6, 0x15, 0x52, 0xe1, 0xe2, 0x75, 0xce, 0xcf,
	0x2b, 0x49, 0xcc, 0xcc, 0x4b, 0x2d, 0x02, 0xcb, 0x33, 0x83, 0xe5, 0x51, 0x05, 0x95, 0x04, 0xb8,
	0xf8, 0x60, 0xd6, 0x05, 0xa5, 0x16, 0x97, 0xe6, 0x94, 0x28, 0xe5, 0x73, 0xf1, 0xbb, 0xa4, 0x16,
	0xd1, 0xd1, 0x09, 0x42, 0x5c, 0x02, 0x08, 0x0b, 0x21, 0x8e, 0x30, 0x9a, 0xcb, 0xc8, 0xc5, 0xed,
	0x0d, 0x09, 0x95, 0xe0, 0xca, 0xbc, 0x64, 0x21, 0x67, 0x2e, 0x0e, 0x98, 0x33, 0x85, 0xa4, 0xf4,
	0x90, 0xc2, 0x4b, 0x0f, 0x25, 0xb0, 0xa4, 0xa4, 0xb1, 0xca, 0x41, 0x0c, 0x15, 0xf2, 0xe4, 0xe2,
	0x42, 0x58, 0x24, 0x24, 0x83, 0xa2, 0x14, 0xcd, 0xcb, 0x52, 0xb2, 0x38, 0x64, 0x21, 0x46, 0x39,
	0x09, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e,
	0xcb, 0x31, 0x24, 0xb1, 0x81, 0xe3, 0xd2, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xe2, 0x98,
	0x1c, 0xe1, 0x01, 0x00, 0x00,
}
